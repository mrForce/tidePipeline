Things to do:

All of the commands that add to a table should print the ID of what they added to stdout.

0. Record commands sent to project -- done

0. Initialize project -- DONE
python tPipeInitialize.py project

1. Add species to project -- I wrote it, but need to test it
python tPipeAddSpecies.py project  Human


2. Print species -- done

Without HLA: python tPipeListSpecies.py project

With HLA: python tPipeListSpecies.py project --showHLA

2. Add HLA to project -- should be able to refer to species by either name or ID --done
python tPipeAddHLA.py project HLA-A0201 1


3. List HLAs -- should be able to refer to species by either name or ID: -- DONE!

For all species: python tPipeListHLA.py project

For a single species: python tPipeListHLA.py  project  1

3. Fix all many-to-many relationships that are wrong -- there don't appear to be any wrong ones remaining

NOTE: For referring to FASTA files, Peptide lists, and NetMHC results, we should let the user enter their own ID (as a secondary ID).

4. Add FASTA files to the project -- done
python tPipeAddFASTA.py project proteins.fasta "The mouse proteome"


4. Rename the tPipeListCommands (to make it clear that it is about command history). -- done

5. Validate project integrity before and after running command, and create backup. --done

5. List FASTA files in the project -- done 
python tPipeListFASTA.py project
       ID | Name | Comment | path
       1   |     The mouse proteome  | | mouse.fasta

6. Create peptide lists from a FASTA file -- should be able to refer to FASTA file by either name or ID
python tPipeCreatePeptideList.py project 1 8 9 10 11

7. Run a peptide list through NetMHC, and filter by rank
python tPipeNetMHC.py project 1  0.02 1

Note that this will store the results of the NetMHC run -- if you call it again with a different rank cutoff, it will re-use the stored NetMHC scores.

8. Create a Tide Index

9. Add MGF file

10. List MGF files

11. Do Tide search

12. Run percolator

13. Get results of percolator or Tide searches

14. Execute a given bash script, and store results in a special place? I think this would be a good idea, but I'm not 100% sure how this will work in practice.