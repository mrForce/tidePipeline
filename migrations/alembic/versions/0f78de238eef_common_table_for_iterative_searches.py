"""Common table for iterative searches

Revision ID: 0f78de238eef
Revises: e3c40c09577d
Create Date: 2018-08-17 14:45:12.540349

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '0f78de238eef'
down_revision = 'e3c40c09577d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('IterativeSearchRun',
    sa.Column('idIterativeSearchRun', sa.Integer(), nullable=False),
    sa.Column('IterativeSearchRunName', sa.String(), nullable=True),
    sa.Column('searchType', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('idIterativeSearchRun'),
    sa.UniqueConstraint('IterativeSearchRunName')
    )
    op.create_table('IterativeRunMGFAssociation',
    sa.Column('iterativerun_id', sa.Integer(), nullable=False),
    sa.Column('mgf_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['iterativerun_id'], ['IterativeSearchRun.idIterativeSearchRun'], ),
    sa.ForeignKeyConstraint(['mgf_id'], ['MGFfile.idMGFfile'], ),
    sa.PrimaryKeyConstraint('iterativerun_id', 'mgf_id')
    )
    op.create_table('IterativeRunSearchAssociation',
    sa.Column('iterativerun_id', sa.Integer(), nullable=False),
    sa.Column('search_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['iterativerun_id'], ['IterativeSearchRun.idIterativeSearchRun'], ),
    sa.ForeignKeyConstraint(['search_id'], ['SearchBase.idSearch'], ),
    sa.PrimaryKeyConstraint('iterativerun_id', 'search_id')
    )
    op.create_table('IterativeFilteredSearchAssociation',
    sa.Column('iterative_id', sa.Integer(), nullable=False),
    sa.Column('filteredsearch_id', sa.Integer(), nullable=False),
    sa.Column('step', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['filteredsearch_id'], ['FilteredSearchResult.idFilteredSearchResult'], ),
    sa.ForeignKeyConstraint(['iterative_id'], ['IterativeSearchRun.idIterativeSearchRun'], ),
    sa.PrimaryKeyConstraint('iterative_id', 'filteredsearch_id')
    )

    iterative_run_mgf_association_inserts = []
    iterative_run_search_association_inserts = []
    iterative_filtered_search_association_inserts = []
    iterative_search_run_inserts = []

    tide_iterative_run = sa.Table('TideIterativeRun', metadata, sa.Column('idTideIterativeRun', sa.Integer, primary_key=True), sa.Column('TideIterativeRunName', sa.String))
    msgf_iterative_run = sa.Table('MSGFPlusIterativeRun', metadata, sa.Column('idMSGFPlusIterativeRun', sa.Integer, primary_key=True), sa.Column('MSGFPlusIterativeRunName', sa.String))
    max_id = 0
    for row in connection.execute(sa.select([tide_iterative_run])):
        if row.idTideIterativeRun > max_id:
            max_id = row.idTideIterativeRun

    new_id = max_id + 1 
    """
    Assign new id's to the rows in MSGFPlusIterativeRun.

    Then, merge MSGFPlusIterativeRunMGFAssociation and TideIterativeRunMGFAssociation into IterativeRunMGFAssociation keeping the new IDs in mind

    Then, merge TideIterativeFilteredSearchAssociation and MSGFPlusIterativeFilteredSearchAssociation into IterativeFilteredSearchAssociation

    Then, create IterativeRunSearchAssociation. This links IterativeSearchRun with the searches in it.
    """
    op.drop_table('MSGFPlusIterativeRunMGFAssociation')
    op.drop_table('TideIterativeRunMGFAssociation')
    op.drop_table('TideIterativeFilteredSearchAssociation')
    op.drop_table('MSGFPlusIterativeFilteredSearchAssociation')
    with op.batch_alter_table('AssignConfidence', schema=None) as batch_op:
        batch_op.create_foreign_key('fk_assignconfidence', 'AssignConfidenceParameterFile', ['idParameterFile'], ['idAssignConfidenceParameterFile'])

    with op.batch_alter_table('MSGFPlusIterativeRun', schema=None) as batch_op:
        batch_op.add_column(sa.Column('idIterativeSearchRun', sa.Integer(), autoincrement=True, nullable=False))
        batch_op.create_foreign_key('fk_iterativerunmsgf', 'IterativeSearchRun', ['idIterativeSearchRun'], ['idIterativeSearchRun'])
        batch_op.drop_column('idMSGFPlusIterativeRun')
        batch_op.drop_column('MSGFPlusIterativeRunName')

    with op.batch_alter_table('TideIterativeRun', schema=None) as batch_op:
        batch_op.add_column(sa.Column('idIterativeSearchRun', sa.Integer(), autoincrement=True, nullable=False))
        batch_op.create_foreign_key('fk_iterativeruntide', 'IterativeSearchRun', ['idIterativeSearchRun'], ['idIterativeSearchRun'])
        batch_op.drop_column('idTideIterativeRun')
        batch_op.drop_column('TideRunName')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('TideIterativeRun', schema=None) as batch_op:
        batch_op.add_column(sa.Column('TideRunName', sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column('idTideIterativeRun', sa.INTEGER(), nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('idIterativeSearchRun')

    with op.batch_alter_table('MSGFPlusIterativeRun', schema=None) as batch_op:
        batch_op.add_column(sa.Column('MSGFPlusIterativeRunName', sa.VARCHAR(), nullable=True))
        batch_op.add_column(sa.Column('idMSGFPlusIterativeRun', sa.INTEGER(), nullable=False))
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('idIterativeSearchRun')

    with op.batch_alter_table('AssignConfidence', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')

    op.create_table('MSGFPlusIterativeFilteredSearchAssociation',
    sa.Column('msgfplusiterative_id', sa.INTEGER(), nullable=False),
    sa.Column('filteredsearch_id', sa.INTEGER(), nullable=False),
    sa.Column('step', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['filteredsearch_id'], ['FilteredSearchResult.idFilteredSearchResult'], ),
    sa.ForeignKeyConstraint(['msgfplusiterative_id'], ['MSGFPlusIterativeRun.idMSGFPlusIterativeRun'], ),
    sa.PrimaryKeyConstraint('msgfplusiterative_id', 'filteredsearch_id')
    )
    op.create_table('TideIterativeFilteredSearchAssociation',
    sa.Column('tideiterative_id', sa.INTEGER(), nullable=False),
    sa.Column('filteredsearch_id', sa.INTEGER(), nullable=False),
    sa.Column('step', sa.INTEGER(), nullable=True),
    sa.ForeignKeyConstraint(['filteredsearch_id'], ['FilteredSearchResult.idFilteredSearchResult'], ),
    sa.ForeignKeyConstraint(['tideiterative_id'], ['TideIterativeRun.idTideIterativeRun'], ),
    sa.PrimaryKeyConstraint('tideiterative_id', 'filteredsearch_id')
    )
    op.create_table('TideIterativeRunMGFAssociation',
    sa.Column('tideiterativerun_id', sa.INTEGER(), nullable=False),
    sa.Column('mgf_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['mgf_id'], ['MGFfile.idMGFfile'], ),
    sa.ForeignKeyConstraint(['tideiterativerun_id'], ['TideIterativeRun.idTideIterativeRun'], ),
    sa.PrimaryKeyConstraint('tideiterativerun_id', 'mgf_id')
    )
    op.create_table('MSGFPlusIterativeRunMGFAssociation',
    sa.Column('msgfiterativerun_id', sa.INTEGER(), nullable=False),
    sa.Column('mgf_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['mgf_id'], ['MGFfile.idMGFfile'], ),
    sa.ForeignKeyConstraint(['msgfiterativerun_id'], ['MSGFPlusIterativeRun.idMSGFPlusIterativeRun'], ),
    sa.PrimaryKeyConstraint('msgfiterativerun_id', 'mgf_id')
    )
    op.drop_table('IterativeFilteredSearchAssociation')
    op.drop_table('IterativeRunSearchAssociation')
    op.drop_table('IterativeRunMGFAssociation')
    op.drop_table('IterativeSearchRun')
    # ### end Alembic commands ###
