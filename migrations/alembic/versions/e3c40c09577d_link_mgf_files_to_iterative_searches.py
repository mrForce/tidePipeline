"""link MGF files to iterative searches

Revision ID: e3c40c09577d
Revises: 20354835efb6
Create Date: 2018-08-16 13:18:50.709632

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'e3c40c09577d'
down_revision = '20354835efb6'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('MSGFPlusIterativeRunMGFAssociation',
    sa.Column('msgfiterativerun_id', sa.Integer(), nullable=False),
    sa.Column('mgf_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['mgf_id'], ['MGFfile.idMGFfile'], ),
    sa.ForeignKeyConstraint(['msgfiterativerun_id'], ['MSGFPlusIterativeRun.idMSGFPlusIterativeRun'], ),
    sa.PrimaryKeyConstraint('msgfiterativerun_id', 'mgf_id')
    )
    op.create_table('TideIterativeRunMGFAssociation',
    sa.Column('tideiterativerun_id', sa.Integer(), nullable=False),
    sa.Column('mgf_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['mgf_id'], ['MGFfile.idMGFfile'], ),
    sa.ForeignKeyConstraint(['tideiterativerun_id'], ['TideIterativeRun.idTideIterativeRun'], ),
    sa.PrimaryKeyConstraint('tideiterativerun_id', 'mgf_id')
    )
    op.create_foreign_key(None, 'AssignConfidence', 'AssignConfidenceParameterFile', ['idParameterFile'], ['idAssignConfidenceParameterFile'])
    metadata = sa.MetaData()
    connection = op.get_bind()

    
    mgfFile = sa.Table('MGFfile', metadata, sa.Column('idMGFfile', sa.Integer, primary_key=True), sa.Column('MGFName', sa.String, unique=True), sa.Column('partOfIterativeSearch', sa.Boolean, default=False))
    searchbase = sa.Table('SearchBase', metadata, sa.Column('idSearch', sa.Integer, primary_key=True), sa.Column('partOfIterativeSearch', sa.Boolean))
    tidesearch = sa.Table('TideSearch', metadata, sa.Column('idSearch', sa.Integer, ForeignKey('SearchBase.idSearch'), primary_key=True), sa.Column('idMGF', sa.Integer, sa.ForeignKey('MGFfile.idMGFfile')))
    msgfsearch = sa.Table('MSGFPlusSearch', metadata, sa.Column('idSearch', sa.Integer, ForeignKey('SearchBase.idSearch'), primary_key=True), sa.Column('idMGF', sa.Integer, sa.ForeignKey('MGFfile.idMGFfile')))
    qvaluebase = sa.Table('QValueBase', metadata, sa.Column('idQValue', sa.Integer, primary_key=True), sa.Column('idSearchBase', sa.Integer, sa.ForeignKey('SearchBase.idSearch'), sa.Column('partOfIterativeSearch', sa.Boolean)))
    filteredsearch_result = sa.Table('FilteredSearchResult', metadata, sa.Column('idFilteredSearchResult', sa.Integer, primary_key=True), sa.Column('idQValueBase', sa.Integer, sa.ForeignKey('QValueBase.idQValue')), sa.Column('partOfIterativeSearch', sa.Boolean))
    for row in connection.execute(sa.select([filteredsearch_result])):
        if row.partOfIterativeSearch:
            correspondingIterativeSearch = 
            for qval_row in connection.execute(sa.select([qvaluebase]).where(qvaluebase.c.idQValue == row.idQValueBase)):
                if qval_row.partOfIterativeSearch:
                    


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'AssignConfidence', type_='foreignkey')
    op.drop_table('TideIterativeRunMGFAssociation')
    op.drop_table('MSGFPlusIterativeRunMGFAssociation')
    # ### end Alembic commands ###
